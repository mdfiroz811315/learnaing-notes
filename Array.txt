An array is a special variable, which can hold more than one value:

let cnts = [10,12,14];

const cars = ["Saab", "Volvo", "BMW"];

const cars = [
  "Saab",
  "Volvo",
  "BMW"
];

const cars = [];
cars[0]= "Saab";
cars[1]= "Volvo";
cars[2]= "BMW";

const cars = new Array("Saab", "Volvo", "BMW");

to read array elements
cars[index]  
console.log(cars[0]) // Saab 
cars[1] Volvo
cars[2] BMW

Changing an Array Element
This statement changes the value of the first element in cars:

const cars = ["Saab", "Volvo", "BMW"];
cars[0] = "Opel"; // ["Opel", "Volvo", "BMW"];

The length Property
The length property of an array returns the length of an array (the number of array elements).

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let length = fruits.length; // 4

Accessing the Last Array Element
Example
const fruits = ["Banana", "Orange", "Apple", "Mango","Guava"];
let fruit = fruits[fruits.length - 1]; // Guava


read Each Element of array using Loop

 let arr = ["Apple","Manago","Banana"];
 // through loop
for(let i=0;i<arr.length;i++){
    console.log(arr[i]);
}
// using foreach
fruits.forEach(function(value){
	console.log(value);
})


Adding Array Elements
The easiest way to add a new element to an array is using the push() method:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
if we want to add guava in array

fruits.push("Guava");// ["Banana", "Orange", "Apple", "Mango","Guava"];

JavaScript Array unshift()
The unshift() method adds a new element to an array (at the beginning), and "unshifts" older elements:

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.unshift("Lemon");// ["Lemon","Banana", "Orange", "Apple", "Mango"];

JavaScript Array pop()
The pop() method removes the last element from an array:

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.pop(); //["Banana", "Orange", "Apple"]

Shifting Elements
Shifting is equivalent to popping, but working on the first element instead of the last.

JavaScript Array shift()
The shift() method removes the first array element and "shifts" all other elements to a lower index.

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.shift(); // [ "Orange", "Apple", "Mango"];


Merging (Concatenating) Arrays
The concat() method creates a new array by merging (concatenating) existing arrays:

Example (Merging Two Arrays)
const myGirls = ["Cecilie", "Lone"];
const myBoys = ["Emil", "Tobias", "Linus"];

const myChildren = myGirls.concat(myBoys); //["Cecilie", "Lone","Emil", "Tobias", "Linus"];

Example (Merging Three Arrays)
const arr1 = ["Cecilie", "Lone"];
const arr2 = ["Emil", "Tobias", "Linus"];
const arr3 = ["Robin", "Morgan"];
const myChildren = arr1.concat(arr2, arr3);


JavaScript Array splice()
The splice() method can be used to add new items to an array:

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 0, "Lemon", "Kiwi"); // Banana,Orange,Lemon,Kiwi,Apple,Mango
The first parameter (2) defines the position where new elements should be added (spliced in).

The second parameter (0) defines how many elements should be removed.

The rest of the parameters ("Lemon" , "Kiwi") define the new elements to be added.

The splice() method returns an array with the deleted items:


JavaScript Array slice()
The slice() method slices out a piece of an array into a new array.

This example slices out a part of an array starting from array element 1 ("Orange"):

Example
const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(1); //  ["Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(1,3); ["Orange", "Lemon"];

Automatic toString()
JavaScript automatically converts an array to a comma separated string when a primitive value is expected.

This is always the case when you try to output an array.

These two examples will produce the same result:

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.toString();

Sorting an Array
The sort() method sorts an array alphabetically:

Example
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.sort(); // ["Apple","Banana","Mango","Orange"];
var num = [2,10,1,5,16,8];
num.sort(); //[1,2,5,8,10,16]

Reversing an Array
The reverse() method reverses the elements in an array.

You can use it to sort an array in descending order:

var num = [2,10,1,5,16,8];
num.reverse(); //[16,10,8,5,2,1]

foreach
 let arr = ["Apple","Manago","Banana"];
fruits.forEach(function(value,index,array){
	console.log(value);
})

The map() method creates a new array by performing a function on each array element.

The map() method does not execute the function for array elements without values.

The map() method does not change the original array.

This example multiplies each array value by 2:

Example
const numbers1 = [45, 4, 9, 16, 25];
const numbers2 = numbers1.map(myFunction);

function myFunction(value, index, array) {
  return value * 2;
}

JavaScript Array filter()
The filter() method creates a new array with array elements that passes a test.

This example creates a new array from elements with a value larger than 18:

Example
const numbers = [45, 4, 9, 16, 25];
const over18 = numbers.filter(myFunction);

function myFunction(value, index, array) {
  return value > 18;
}